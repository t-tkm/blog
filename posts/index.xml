<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Takumi Tomita&#39;s Blog</title>
    <link>https://t-tkm.github.io/blog/posts/</link>
    <description>Recent content in Posts on Takumi Tomita&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2022 Takumi Tomita Powered by Hugo &amp; Pickles.</copyright>
    <lastBuildDate>Sun, 16 Oct 2022 00:00:00 +0900</lastBuildDate><atom:link href="https://t-tkm.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>踏台VPCの作成(Internet Gateway有り)(AWS)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/aws_secure_bastion_2/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/aws_secure_bastion_2/</guid>
      <description>はじめに 前回は、VPCにInternet Gatewayを設置しない完全にプライベートな環境での、ブラウザを使うEC2操作を見ました。 しかしこのままでは、yumの更新、npmなど各種パッケージ経由でのツール導入、(インターネットにあるRESTエンドポイントを使う)AWS CLI操作などできません。 そこで今回は、インターネットへのアウトバウンド通信を許可するためにNAT GWを設置しようと思います。トラフィックを少し管理するために。Network Firewall というIPS/IDS相当のサービスを設置したいと思います。 参考 [AWS Black Belt Online Seminar] AWS Network Firewall 入門 資料公開 [AWS Black Belt Online Seminar]AWS Network Firewall 応用編1 資料公開 AWSブログ: 【開催報告】アップデート紹介とちょっぴり DiveDeep する AWS の時間 第二十二</description>
    </item>
    
    <item>
      <title>踏台VPCの作成(Internet Gateway無し)(AWS)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/aws_secure_bastion_1/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/aws_secure_bastion_1/</guid>
      <description>はじめに VPCにInternet GWを割当てず、プライベートサブネットにあるサーバ(EC2)を操作する方法です。Cloud9(Amazon Linux)と、Windows Server(ブラウザを使ったGUI操作)を説明します。 [参考]Systems Manager を使用してインターネットアクセスなしでプライベート EC2 インスタンスを管理できるように、VPC エンドポイントを作成するにはどうすればよいですか? 構成 基盤構築(Terraform) ネットワークなどの基盤構築には、Terraformを活用しました。コードはこちら(GitHub)からダウンロードできます。 VPCパラメータ resource &amp;#34;aws_vpc&amp;#34; &amp;#34;Main&amp;#34; { cidr_block = var.main_vpc_cidr instance_tenancy = &amp;#34;default&amp;#34; enable_dns_hostnames = true enable_dns_support = true tags = { Name = &amp;#34;${var.system_name}-vpc&amp;#34; } } Bastionサブネットパラメー</description>
    </item>
    
    <item>
      <title>AWS App2Container(ECS/EKSデプロイ編)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/aws_app2container_ecs_eks/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/aws_app2container_ecs_eks/</guid>
      <description>1. はじめに ここでは、前回の記事「AWS App2Container(お試し編)」では触れられなかったデプロイについて試してみます。 実際は、次の3ステップでデプロイできて衝撃的でした！ deployment.jsonを編集し、「ECS」か「EKS」を選択(AppRunnerも選択可)。 app2containerコマンド(オプションgenerate app-deployment)でマニフェスト作成(一部S3に格納される) CloudFormationでデプロイ そして、ステップ2の「app2containerコマンド」の引数オプションとして「&amp;ndash;deploy」を指定すると、ステップ3すら不要です^^ それでは試してみましょう。 2. マニフェス</description>
    </item>
    
    <item>
      <title>Hugoでハンズオンサイト(AWS)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/aws_hugo/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/aws_hugo/</guid>
      <description>はじめに 唐突ですが、AWS Workshopsというサイトをご存知でしょうか？ AWS Workshopsは、AWSが公式に提供しているハンズオンコンテンツで、AWS各種サービスについて、実際に手を動かしてみたい場合に大変重宝するサイトです。 https://workshops.aws/ さてこのサイト、とてもお洒落な作りになっていますが、どのように作られているのでしょうか？ 答えは、Hugoと言われるGo製の静的サイトジェネレータと、Learnと呼ばれるテーマ(Theme)を使って作られているようです。 https://gohugo.io/ https://jamstackthemes.dev/theme/hugo-theme-learn/ 実はこのAWS Workshopsのコンテンツの一つに、このようなハンズオンサイトの作り方のハンズオンがあります！折角なので、試してみたいと思います。 https://hosting-hugo-content.workshop.aws/ ※ハンズオンの主目的は、Hugoの</description>
    </item>
    
    <item>
      <title>AWS App2Container(お試し編)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/aws_app2container/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/aws_app2container/</guid>
      <description>はじめに AWS App2Containerは、起動中のjavaアプリをコンテナイメージに変換し、ECSやEKSで稼働させるためのテンプレートを生成するツールになります。 Accelerating your Migration to AWS 下記、App2ContainerのUerGuideにある通り、サポートされるプラットフォームと、そうでない場合で挙動が変わるため、本記事ではその辺を試してみたいと思います(ここでは、ECSやEKSでの稼働検証は含まれません)。 For supported application frameworks, App2Container targets only the application files and dependencies that are needed for containerization, thereby minimizing the size of the resulting container image. This is known as application mode. If App2Container does not find a supported framework running on your application server, or if you have other dependent processes running on your server, App2Container takes a conservative approach to identifying dependencies. This is known as process mode. For process mode, all non-system files on the application server are included in the container image. 本記事のスコープは下記になります。 以降、次の流れで検証します。 App2</description>
    </item>
    
    <item>
      <title>AWS App2Container(イメージ最適化編)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/aws_app2container_opt/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/aws_app2container_opt/</guid>
      <description>はじめに 前回(「AWS App2Container(お試し編)」)で試した非サポートアプリの場合(ex. SpringBootアプリ)、サポートされるtomcatアプリと比較すると(802MB)、デフォルトで生成されたコンテナイメージは16.1GBとかなりのサイズとなっていました。 root@ip-10-0-1-112:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE java-generic-6ef9339e latest 8ef7ef3e7db0 38 minutes ago 16.1GB java-tomcat-5da060de latest cc2de1db6ef8 58 minutes ago 802MB そこで、ここでは、下記ガイドラインに従いサイズをスリム化してみようと思います。 Optimize AWS App2Container generated Docker images ポイントは、App2Containerは、分析結果であるanalysis.jsonをベースにイメージを生成するため、不要なファイルを含めないようにanalysis.jsonを編集することになります。 コンテナイメージ分析(di</description>
    </item>
    
    <item>
      <title>Alexaでかけ算ゲーム</title>
      <link>https://t-tkm.github.io/blog/posts/2021/03/aws_alexa_practice/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/03/aws_alexa_practice/</guid>
      <description>Alexaでかけ算ゲーム はじめに 今年の正月は、コロナ禍ということで帰省ができなかったため、以前より気になっていたAlexaに手を出してみました。あわよくば、今回の勉強を通して「Alexa認定」も取得できるかも？と思ったのですが、そこまで甘い世界ではありませんでした1。。。 Alexa全体像の理解 さて、実際始めようとすると、今まで公私共に全く触った事の無いサービスという事もあり、どこから手をつけてよいものかわかりません。。。そこでとっかかりとして、Alexa公式 動画シリーズ「Alexa道場」から始めることにしました。こちらの教材がとても丁寧で、ストーリを追って段階的に学習できお勧めです！一通り動画を視聴し終わると、なんとなく(開発含めた</description>
    </item>
    
    <item>
      <title>我が家のマイクラサーバー(AWS編)</title>
      <link>https://t-tkm.github.io/blog/posts/2021/03/minecraft_server_aws_ecs/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/03/minecraft_server_aws_ecs/</guid>
      <description>はじめに マイクラサーバ(javaアプリ)をECS+Fargate+EFSで動かしてみた備忘録になります。趣味であるこのシステムの運用を通じて、今後周辺ノウハウを強化していきたいというのが(私、インフラエンジニア)目的ですw 我が家はマイクラのヘビーユーザで、息子3人(小学生)と母親が、同じ世界(マイクラではワールドと呼ぶ)にログインして、各々の建築を見せあったり、道具を揃えて洞窟を冒険したり楽しんでいます。私はそのマルチサーバをお守りしており、以前はVM上にサーバを構築して運用していました。しかし、1つのサーバで展開できるワールドは1つであり、色々複数のワールドを家族に提供するには、複数サーバを立てる必要があります。そこで、最近ではア</description>
    </item>
    
    <item>
      <title>FireLensを使ってFargateコンテナのファイルログを転送してみた</title>
      <link>https://t-tkm.github.io/blog/posts/2020/07/aws_firelens_practice/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2020/07/aws_firelens_practice/</guid>
      <description>はじめに 通常はTwelve-Factor Appに「ログをイベントストリームとして扱う」とあるように、コンテナアプリケーションのログは標準出力を集約先とするのが設計原則です。しかし、もともと仮想マシンで動かしていたサーバをコンテナ化しようとする時など、 「まずはアプリケーションコンテナを極力改修せず(ログ出力先を、ファイルから標準出力に変更)になんとかならないか。。。」 というニーズもあるかと思います。ここでは、ファイル出力されたアプリケーションコンテナのログをFireLens(Fluentbit)を使ってCloudWatchへ転送する方法を紹介します。尚、FireLensを使わずとも、サイドカー(Fluentd)を自前で準備する方法とし</description>
    </item>
    
  </channel>
</rss>
