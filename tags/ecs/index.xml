<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ECS on Takumi Tomita&#39;s Blog</title>
    <link>https://t-tkm.github.io/blog/tags/ecs/</link>
    <description>Recent content in ECS on Takumi Tomita&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2022 Takumi Tomita Powered by Hugo &amp; Pickles.</copyright>
    <lastBuildDate>Sun, 30 Mar 2025 17:00:00 +0900</lastBuildDate><atom:link href="https://t-tkm.github.io/blog/tags/ecs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AP-DB分離パターンにおけるレイテンシー影響確認</title>
      <link>https://t-tkm.github.io/blog/posts/2025/03/aws_sesar2_vpn/</link>
      <pubDate>Sun, 30 Mar 2025 17:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2025/03/aws_sesar2_vpn/</guid>
      <description>1. 概要 オンプレミスで稼働しているレガシーアプリケーション（※）をクラウドに移行する方法として、「Replatform to Containers」というアプローチがあります。 ※本記事では、かつて主流だったSeasar2ベースのアプリケーションをレガシーアプリケーションの例として取り上げています。 この手法では、アプリケーションコードの修正を最小限にとどめてコンテナ化し、AWS Fargateなどのマネージドサービス上で実行することで、仮想マシン（VM）の保守運用から解放されるという利点があります。 ただし、データベース（DB）も同時にクラウドへ移行できれば理想的ですが、以下のような理由からオンプレミスに残すケースも少なくありません。 段階的な移行</description>
    </item>
    
    <item>
      <title>ベイズの定理を活用する！Party RockとDifyで複数のLLMを比較検証</title>
      <link>https://t-tkm.github.io/blog/posts/2024/09/aws_dify/</link>
      <pubDate>Sun, 29 Sep 2024 21:34:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2024/09/aws_dify/</guid>
      <description>概要 本記事では、近年注目を集めるLLMの性能を比較検証し、生成AIの活用可能性を探ります。 特に、ベイズの定理のような統計的な問題に対するLLMの回答精度に焦点を当て、実用的な側面から 考察します。 以前(今から1年半ほど前)、こちらの記事に「ChatGPTによる認知バイアスエラー回避の可能性」で、 合理的な判断を助けるために生成AIを活用しよう、ただし、生成AIは計算が苦手なようで、正しい回答を得るため には生成AIへの問合せ(プロンプト)に工夫が必要だと述べました。 一方、現時点では、 「問合せ(文)の仕方」やタイミングによって、正しい答えが得られないケースもある ことを確認できました。従って、ChatGPT利用には適切な 「問い」を投げかける事</description>
    </item>
    
    <item>
      <title>AWS FAN!</title>
      <link>https://t-tkm.github.io/blog/posts/2023/01/aws_fan/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2023/01/aws_fan/</guid>
      <description>はじめに 明けましておめでとうございます。2023年もスタートし、一発目の記事になります。私は普段、AWSを中心としたクラウド活用のソリューション設計を専門に仕事している一方、個人としてもAWSユーザとして、様々なクラウドサービスを楽しませていただいています。 本格的に触り始めたのは2018年頃からとだいぶ遅いスタートではありますが、少し振り返ってみようと思います。 ※本コンテンツは2022年の年末、とあるAWSコミュニティーの「お祭りイベント」で公演させて頂いたものになります。 スマートホーム(2018年〜2019年頃) 会社の小集団活動も活用し、趣味のラズパイやArduinoといったマイコンいじりであれこれプロトタイピングを楽しんでいまし</description>
    </item>
    
    <item>
      <title>AWS App2Container(ECS/EKSデプロイ編)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container_ecs_eks/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container_ecs_eks/</guid>
      <description>1. はじめに ここでは、前回の記事「AWS App2Container(お試し編)」では触れられなかったデプロイについて試してみます。 実際は、次の3ステップでデプロイできて衝撃的でした！ deployment.jsonを編集し、「ECS」か「EKS」を選択(AppRunnerも選択可)。 app2containerコマンド(オプションgenerate app-deployment)でマニフェスト作成(一部S3に格納される) CloudFormationでデプロイ そして、ステップ2の「app2containerコマンド」の引数オプションとして「&amp;ndash;deploy」を指定すると、ステップ3すら不要です^^ それでは試してみましょう。 2. マニフェス</description>
    </item>
    
    <item>
      <title>AWS App2Container(お試し編)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container/</guid>
      <description>はじめに AWS App2Containerは、起動中のjavaアプリをコンテナイメージに変換し、ECSやEKSで稼働させるためのテンプレートを生成するツールになります。 Accelerating your Migration to AWS 下記、App2ContainerのUerGuideにある通り、サポートされるプラットフォームと、そうでない場合で挙動が変わるため、本記事ではその辺を試してみたいと思います(ここでは、ECSやEKSでの稼働検証は含まれません)。 For supported application frameworks, App2Container targets only the application files and dependencies that are needed for containerization, thereby minimizing the size of the resulting container image. This is known as application mode. If App2Container does not find a supported framework running on your application server, or if you have other dependent processes running on your server, App2Container takes a conservative approach to identifying dependencies. This is known as process mode. For process mode, all non-system files on the application server are included in the container image. 本記事のスコープは下記になります。 以降、次の流れで検証します。 App2</description>
    </item>
    
    <item>
      <title>AWS App2Container(イメージ最適化編)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container_opt/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container_opt/</guid>
      <description>はじめに 前回(「AWS App2Container(お試し編)」)で試した非サポートアプリの場合(ex. SpringBootアプリ)、サポートされるtomcatアプリと比較すると(802MB)、デフォルトで生成されたコンテナイメージは16.1GBとかなりのサイズとなっていました。 root@ip-10-0-1-112:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE java-generic-6ef9339e latest 8ef7ef3e7db0 38 minutes ago 16.1GB java-tomcat-5da060de latest cc2de1db6ef8 58 minutes ago 802MB そこで、ここでは、下記ガイドラインに従いサイズをスリム化してみようと思います。 Optimize AWS App2Container generated Docker images ポイントは、App2Containerは、分析結果であるanalysis.jsonをベースにイメージを生成するため、不要なファイルを含めないようにanalysis.jsonを編集することになります。 コンテナイメージ分析(di</description>
    </item>
    
    <item>
      <title>我が家のマイクラサーバー(AWS編)</title>
      <link>https://t-tkm.github.io/blog/posts/2021/03/minecraft_server_aws_ecs/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/03/minecraft_server_aws_ecs/</guid>
      <description>はじめに マイクラサーバ(javaアプリ)をECS+Fargate+EFSで動かしてみた備忘録になります。趣味であるこのシステムの運用を通じて、今後周辺ノウハウを強化していきたいというのが(私、インフラエンジニア)目的ですw 我が家はマイクラのヘビーユーザで、息子3人(小学生)と母親が、同じ世界(マイクラではワールドと呼ぶ)にログインして、各々の建築を見せあったり、道具を揃えて洞窟を冒険したり楽しんでいます。私はそのマルチサーバをお守りしており、以前はVM上にサーバを構築して運用していました。しかし、1つのサーバで展開できるワールドは1つであり、色々複数のワールドを家族に提供するには、複数サーバを立てる必要があります。そこで、最近ではア</description>
    </item>
    
  </channel>
</rss>
