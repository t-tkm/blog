<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container on My Tech Blog Posts</title>
    <link>/tags/container/</link>
    <description>Recent content in Container on My Tech Blog Posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2021 Takumi Tomita Powered by Hugo &amp; Pickles.</copyright>
    <lastBuildDate>Sat, 12 Mar 2022 00:00:00 +0900</lastBuildDate><atom:link href="/tags/container/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS App2Container(お試し編)</title>
      <link>/posts/2022/aws_app2container/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>/posts/2022/aws_app2container/</guid>
      <description>はじめに AWS App2Containerは、起動中のjavaアプリをコンテナイメージに変換し、ECSやEKSで稼働させるためのテンプレートを生成するツールになります。
Accelerating your Migration to AWS
  下記、App2ContainerのUerGuideにある通り、サポートされるプラットフォームと、そうでない場合で挙動が変わるため、本記事ではその辺を試してみたいと思います(ここでは、ECSやEKSでの稼働検証は含まれません)。
 For supported application frameworks, App2Container targets only the application files and dependencies that are needed for containerization, thereby minimizing the size of the resulting container image. This is known as application mode.
  If App2Container does not find a supported framework running on your application server, or if you have other dependent processes running on your server, App2Container takes a conservative approach to identifying dependencies.</description>
    </item>
    
    <item>
      <title>AWS App2Container(イメージ最適化編)</title>
      <link>/posts/2022/aws_app2container_opt/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>/posts/2022/aws_app2container_opt/</guid>
      <description>はじめに 前回(「AWS App2Container(お試し編)」)で試した非サポートアプリの場合(ex. SpringBootアプリ)、サポートされるtomcatアプリと比較すると(802MB)、デフォルトで生成されたコンテナイメージは16.1GBとかなりのサイズとなっていました。
  root@ip-10-0-1-112:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE java-generic-6ef9339e latest 8ef7ef3e7db0 38 minutes ago 16.1GB java-tomcat-5da060de latest cc2de1db6ef8 58 minutes ago 802MB そこで、ここでは、下記ガイドラインに従いサイズをスリム化してみようと思います。
Optimize AWS App2Container generated Docker images
ポイントは、App2Containerは、分析結果であるanalysis.jsonをベースにイメージを生成するため、不要なファイルを含めないようにanalysis.jsonを編集することになります。   コンテナイメージ分析(dive) はじめに、コンテナイメージの中身を確認できるdiveというツールを導入して、既存のコンテナイメージを分析してみます。
root@ip-10-0-1-112:~# wget https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb root@ip-10-0-1-112:~# apt install ./dive_0.9.2_linux_amd64.deb root@ip-10-0-1-112:~# dpkg -l | grep dive ii dive 0.9.2 amd64 no description given root@ip-10-0-1-112:~# dive --version dive 0.9.2 使い方は簡単で、解析したいコンテナイメージ名とタグ(option)をdiveコマンドの引数に指定するだけです。
 this can take a while for large images</description>
    </item>
    
  </channel>
</rss>
