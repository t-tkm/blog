<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on Takumi Tomita&#39;s Blog</title>
    <link>https://t-tkm.github.io/blog/tags/aws/</link>
    <description>Recent content in AWS on Takumi Tomita&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; 2022 Takumi Tomita Powered by Hugo &amp; Pickles.</copyright>
    <lastBuildDate>Sun, 30 Mar 2025 17:00:00 +0900</lastBuildDate><atom:link href="https://t-tkm.github.io/blog/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AP-DB分離パターンにおけるレイテンシー影響確認</title>
      <link>https://t-tkm.github.io/blog/posts/2025/03/aws_sesar2_vpn/</link>
      <pubDate>Sun, 30 Mar 2025 17:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2025/03/aws_sesar2_vpn/</guid>
      <description>1. 概要 オンプレミスで稼働しているレガシーアプリケーション（※）をクラウドに移行する方法として、「Replatform to Containers」というアプローチがあります。 ※本記事では、かつて主流だったSeasar2ベースのアプリケーションをレガシーアプリケーションの例として取り上げています。 この手法では、アプリケーションコードの修正を最小限にとどめてコンテナ化し、AWS Fargateなどのマネージドサービス上で実行することで、仮想マシン（VM）の保守運用から解放されるという利点があります。 ただし、データベース（DB）も同時にクラウドへ移行できれば理想的ですが、以下のような理由からオンプレミスに残すケースも少なくありません。 段階的な移行</description>
    </item>
    
    <item>
      <title>ベイズの定理を活用する！Party RockとDifyで複数のLLMを比較検証</title>
      <link>https://t-tkm.github.io/blog/posts/2024/09/aws_dify/</link>
      <pubDate>Sun, 29 Sep 2024 21:34:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2024/09/aws_dify/</guid>
      <description>概要 本記事では、近年注目を集めるLLMの性能を比較検証し、生成AIの活用可能性を探ります。 特に、ベイズの定理のような統計的な問題に対するLLMの回答精度に焦点を当て、実用的な側面から 考察します。 以前(今から1年半ほど前)、こちらの記事に「ChatGPTによる認知バイアスエラー回避の可能性」で、 合理的な判断を助けるために生成AIを活用しよう、ただし、生成AIは計算が苦手なようで、正しい回答を得るため には生成AIへの問合せ(プロンプト)に工夫が必要だと述べました。 一方、現時点では、 「問合せ(文)の仕方」やタイミングによって、正しい答えが得られないケースもある ことを確認できました。従って、ChatGPT利用には適切な 「問い」を投げかける事</description>
    </item>
    
    <item>
      <title>お手軽にAWS Site-to-Site VPNを試してみよう(AWSシミュレーション環境)</title>
      <link>https://t-tkm.github.io/blog/posts/2024/03/aws_vpn/</link>
      <pubDate>Fri, 29 Mar 2024 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2024/03/aws_vpn/</guid>
      <description>はじめに 自宅環境とAWS間を、お手軽にAWS Site-to-Site VPNで接続する方法を紹介したいと思います。 仕事がら、たまに自分の環境でVPNを張り、いろいろ実験したいことが稀にあります。 しかし、常時VPNを接続するのは費用も安く無いため(「付録」参照)、実験したい時にアドホックにVPNを 構築したいわけです。そこで、筆者がVPN構築に使っている方法を、(自身の備忘録も兼ねて) 紹介したいと思います。 コンテンツ 前編は、純粋にAWS環境だけでVPNをシミュレートする方式で、後編で自宅とAWSをVPNルータ を用いる方法を説明します。 お手軽にAWS Site-to-Site VPNを試してみよう(AWSシミュレーション環境) ←本編 お手軽にAWS Site-to-Site VPNを試してみよう(自宅VPN環境) N</description>
    </item>
    
    <item>
      <title>お手軽にAWS Site-to-Site VPNを試してみよう(自宅VPN環境)</title>
      <link>https://t-tkm.github.io/blog/posts/2024/03/aws_vpn2/</link>
      <pubDate>Fri, 29 Mar 2024 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2024/03/aws_vpn2/</guid>
      <description>はじめに 前編で構築したVPN環境に、自宅VPNルータを追加してみようと思います。 お手軽にAWS Site-to-Site VPNを試してみよう(AWSシミュレーション環境) お手軽にAWS Site-to-Site VPNを試してみよう(自宅VPN環境) ←本編 筆者の環境では、VPNルータとしてTP-Link Omada ギガビット マルチWAN VPNルーター ER605 を使っています(こちらは2022年6月12日に8,800円で購入しました)。 自宅VPN環境 構築 基本的に、こちらの記事に従って構築させていただきました。 8800円の格安VPNルータで家とAWS間をサイト間VPN（IPSec）で接続する ※「VPN接続」「Transit GW」周りが少しだけ異なりますので、適宜確認お願いします。 UTM - ER605間接続 Link U</description>
    </item>
    
    <item>
      <title>AWS Cost Usage Reportの可視化(3) -生成AI SQL (Cube &#43; LangChain)</title>
      <link>https://t-tkm.github.io/blog/posts/2023/12/aws_cost_usage_report3/</link>
      <pubDate>Sat, 30 Dec 2023 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2023/12/aws_cost_usage_report3/</guid>
      <description>はじめに 「AWS Cost Usage Reportの可視化(2) -ヘッドレスBIツールCubeを試してみる」の続編になります。 今年のre:Invent(2023)も盛り沢山！まだまだ全体は把握できておりませんが、やはり、生成系AIのトピックが多かった印象です。 その中で、私は「Amazon Q generative SQL in Amazon Redshift」が目にとまりました。 「AWS Black Belt Online Seminar re:Invent 2023アップデート速報」(スライド#40) 下記ツイートは、(1年ほど前)ChatGPTを使い始めた頃のものです。当時は、本番サービスとして提供されるとは夢にも思いませんでした！ このサービスは、ユーザが自然言語で問合せると推奨SQLクエリを生成してくれるというものですが、似たようなシステムのDIY可能で</description>
    </item>
    
    <item>
      <title>AWS Cost Usage Reportの可視化(2) -ヘッドレスBIツールCubeを試してみる</title>
      <link>https://t-tkm.github.io/blog/posts/2023/09/aws_cost_usage_report2/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2023/09/aws_cost_usage_report2/</guid>
      <description>はじめに 「AWS Cost Usage Reportの可視化」の続編になります。 前回記事では、AWS費用のレポートがS3に定期的に溜め、S3データをSQLで検索できるマネージドサービスAthenaを構築し、AthenaをデータソースとしてGrafanaやRedashといったBIツールで可視化基盤を構築しました。 その後も、Apache Supersetや各種NotebooksといったBIツールで可視化していたものの、今度はReactやVueといった フロントエンド開発を通し、カスタムダッシュボートを開発・構築したい、という思いに至りました。 そこで目にしたのが、記事の副表題にもあるヘッドレスBIツールCube CoreというOSSになります。 このOSSですが、C</description>
    </item>
    
    <item>
      <title>AWS Cost Usage Reportの可視化</title>
      <link>https://t-tkm.github.io/blog/posts/2023/06/aws_cost_usage_report/</link>
      <pubDate>Sun, 18 Jun 2023 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2023/06/aws_cost_usage_report/</guid>
      <description>はじめに 本記事では、ローカルPC上でGrafana、Redashの可視化ツールを起動させ、AWSの費用レポートを データソースに可視化(接続)する手順を確認します。 近年益々「オブザーバビリティ(Observability)」や「ビジネスインテリジェンス(BI)」といったデータ可視化が重要になっています。そのような中、データ活用の入口として、OSSに代表されるような多様な可視化ツールの味見やデモに 対するニーズも増えてきている気がします。 Observability系: Nagios、Graphite、Grafana(Prometheus)、Kibana(ELK)、OpenTelemetry、OpenCensus、Jaeger etc. BI系: Red</description>
    </item>
    
    <item>
      <title>AWS FAN!</title>
      <link>https://t-tkm.github.io/blog/posts/2023/01/aws_fan/</link>
      <pubDate>Thu, 05 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2023/01/aws_fan/</guid>
      <description>はじめに 明けましておめでとうございます。2023年もスタートし、一発目の記事になります。私は普段、AWSを中心としたクラウド活用のソリューション設計を専門に仕事している一方、個人としてもAWSユーザとして、様々なクラウドサービスを楽しませていただいています。 本格的に触り始めたのは2018年頃からとだいぶ遅いスタートではありますが、少し振り返ってみようと思います。 ※本コンテンツは2022年の年末、とあるAWSコミュニティーの「お祭りイベント」で公演させて頂いたものになります。 スマートホーム(2018年〜2019年頃) 会社の小集団活動も活用し、趣味のラズパイやArduinoといったマイコンいじりであれこれプロトタイピングを楽しんでいまし</description>
    </item>
    
    <item>
      <title>AWSホワイトペーパを題材にFMEAを見る</title>
      <link>https://t-tkm.github.io/blog/posts/2022/12/aws_fmea/</link>
      <pubDate>Fri, 09 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/12/aws_fmea/</guid>
      <description>この記事は、Japan APN Ambassador Advent Calendar 2022の9日目のエントリになります。 はじめに 2022年10月に「金融リファレンスアーキテクチャ 日本版」も一般公開され、ミッションクリティカルなシステムへのクラウド活用が加速していくと思われます。 そのような潮流のなか、システムの信頼性(安全性)に対し、従来製造業を中心に活用されている「FMEA(Failure Mode and Effects Analysis)」(故障モード・影響解析)が、ソフトウェア開発でも有効なアプローチではないかと思い、ここに簡単にご紹介したいと思います。 サマリ AWSホワイトペーパ「AWSでのミッションクリティカルな金融サービスアプリケーションの構築」から、FMEAサンプル2件(アプリ分析、インフラ分析)を確</description>
    </item>
    
    <item>
      <title>踏台VPCの作成(Internet Gateway有り)(AWS)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/10/aws_secure_bastion_2/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/10/aws_secure_bastion_2/</guid>
      <description>はじめに 前回は、VPCにInternet Gatewayを設置しない完全にプライベートな環境での、ブラウザを使うEC2操作を見ました。 しかしこのままでは、yumの更新、npmなど各種パッケージ経由でのツール導入、(インターネットにあるRESTエンドポイントを使う)AWS CLI操作などできません。 そこで今回は、インターネットへのアウトバウンド通信を許可するためにNAT GWを設置しようと思います。トラフィックを少し管理するために。Network Firewall というIPS/IDS相当のサービスを設置したいと思います。 なお、今回の検証で、Network Firewallは1,400円/日程度の費用が発生しました。(1 endpoints x 24 hours x 0.395 USD = 9.48 USD 148円/USD 換算</description>
    </item>
    
    <item>
      <title>踏台VPCの作成(Internet Gateway無し)(AWS)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/10/aws_secure_bastion_1/</link>
      <pubDate>Sun, 16 Oct 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/10/aws_secure_bastion_1/</guid>
      <description>はじめに VPCにInternet GWを割当てず、プライベートサブネットにあるサーバ(EC2)を操作する方法です。Cloud9(Amazon Linux)と、Windows Server(ブラウザを使ったGUI操作)を説明します。 [参考]Systems Manager を使用してインターネットアクセスなしでプライベート EC2 インスタンスを管理できるように、VPC エンドポイントを作成するにはどうすればよいですか? 構成 基盤構築(Terraform) ネットワークなどの基盤構築には、Terraformを活用しました。コードはこちら(GitHub)からダウンロードできます。 VPCパラメータ resource &amp;#34;aws_vpc&amp;#34; &amp;#34;Main&amp;#34; { cidr_block = var.main_vpc_cidr instance_tenancy = &amp;#34;default&amp;#34; enable_dns_hostnames = true enable_dns_support = true tags = { Name = &amp;#34;${var.system_name}-vpc&amp;#34; } } Bastionサブネットパラメー</description>
    </item>
    
    <item>
      <title>AWS App2Container(ECS/EKSデプロイ編)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container_ecs_eks/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container_ecs_eks/</guid>
      <description>1. はじめに ここでは、前回の記事「AWS App2Container(お試し編)」では触れられなかったデプロイについて試してみます。 実際は、次の3ステップでデプロイできて衝撃的でした！ deployment.jsonを編集し、「ECS」か「EKS」を選択(AppRunnerも選択可)。 app2containerコマンド(オプションgenerate app-deployment)でマニフェスト作成(一部S3に格納される) CloudFormationでデプロイ そして、ステップ2の「app2containerコマンド」の引数オプションとして「&amp;ndash;deploy」を指定すると、ステップ3すら不要です^^ それでは試してみましょう。 2. マニフェス</description>
    </item>
    
    <item>
      <title>Hugoでハンズオンサイト(AWS)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/03/aws_hugo/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/03/aws_hugo/</guid>
      <description>はじめに 唐突ですが、AWS Workshopsというサイトをご存知でしょうか？ AWS Workshopsは、AWSが公式に提供しているハンズオンコンテンツで、AWS各種サービスについて、実際に手を動かしてみたい場合に大変重宝するサイトです。 https://workshops.aws/ さてこのサイト、とてもお洒落な作りになっていますが、どのように作られているのでしょうか？ 答えは、Hugoと言われるGo製の静的サイトジェネレータと、Learnと呼ばれるテーマ(Theme)を使って作られているようです。 https://gohugo.io/ https://jamstackthemes.dev/theme/hugo-theme-learn/ 実はこのAWS Workshopsのコンテンツの一つに、このようなハンズオンサイトの作り方のハンズオンがあります！折角なので、試してみたいと思います。 https://hosting-hugo-content.workshop.aws/ ※ハンズオンの主目的は、Hugoの</description>
    </item>
    
    <item>
      <title>AWS App2Container(お試し編)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container/</guid>
      <description>はじめに AWS App2Containerは、起動中のjavaアプリをコンテナイメージに変換し、ECSやEKSで稼働させるためのテンプレートを生成するツールになります。 Accelerating your Migration to AWS 下記、App2ContainerのUerGuideにある通り、サポートされるプラットフォームと、そうでない場合で挙動が変わるため、本記事ではその辺を試してみたいと思います(ここでは、ECSやEKSでの稼働検証は含まれません)。 For supported application frameworks, App2Container targets only the application files and dependencies that are needed for containerization, thereby minimizing the size of the resulting container image. This is known as application mode. If App2Container does not find a supported framework running on your application server, or if you have other dependent processes running on your server, App2Container takes a conservative approach to identifying dependencies. This is known as process mode. For process mode, all non-system files on the application server are included in the container image. 本記事のスコープは下記になります。 以降、次の流れで検証します。 App2</description>
    </item>
    
    <item>
      <title>AWS App2Container(イメージ最適化編)</title>
      <link>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container_opt/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2022/03/aws_app2container_opt/</guid>
      <description>はじめに 前回(「AWS App2Container(お試し編)」)で試した非サポートアプリの場合(ex. SpringBootアプリ)、サポートされるtomcatアプリと比較すると(802MB)、デフォルトで生成されたコンテナイメージは16.1GBとかなりのサイズとなっていました。 root@ip-10-0-1-112:~# docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE java-generic-6ef9339e latest 8ef7ef3e7db0 38 minutes ago 16.1GB java-tomcat-5da060de latest cc2de1db6ef8 58 minutes ago 802MB そこで、ここでは、下記ガイドラインに従いサイズをスリム化してみようと思います。 Optimize AWS App2Container generated Docker images ポイントは、App2Containerは、分析結果であるanalysis.jsonをベースにイメージを生成するため、不要なファイルを含めないようにanalysis.jsonを編集することになります。 コンテナイメージ分析(di</description>
    </item>
    
    <item>
      <title>クラウド技術書紹介(AWS/Azure/2021年編)</title>
      <link>https://t-tkm.github.io/blog/posts/2021/12/aws_books/</link>
      <pubDate>Sat, 25 Dec 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/12/aws_books/</guid>
      <description>クラウド技術書紹介(AWS/Azure/2021年編) Qiitaにて公開。こちら→</description>
    </item>
    
    <item>
      <title>AWS RDS(PostgreSQL)とPower BIを接続してみた</title>
      <link>https://t-tkm.github.io/blog/posts/2021/12/aws_powerbi/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/12/aws_powerbi/</guid>
      <description>AWS RDS(PostgreSQL)とPower BIを接続してみた Qiitaにて公開。こちら→</description>
    </item>
    
    <item>
      <title>AWS費用監視ツール(後編:Lambda活用)</title>
      <link>https://t-tkm.github.io/blog/posts/2021/12/aws_cli_2/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/12/aws_cli_2/</guid>
      <description>AWS費用監視ツール(後編:Lambda活用) Qiitaにて公開。こちら→</description>
    </item>
    
    <item>
      <title>AWS費用監視ツール(前編:AWS マネジメントコンソール&amp;AWS CLI)</title>
      <link>https://t-tkm.github.io/blog/posts/2021/12/aws_cli_1/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/12/aws_cli_1/</guid>
      <description>AWS費用監視ツール(前編:AWS マネジメントコンソール&amp;amp;AWS CLI) Qiitaにて公開。こちら→</description>
    </item>
    
    <item>
      <title>AWS移行 - ApplicationDiscoveryService(ADS)でのインベントリ情報収集</title>
      <link>https://t-tkm.github.io/blog/posts/2021/07/aws_ads/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/07/aws_ads/</guid>
      <description>AWS移行 - ApplicationDiscoveryService(ADS)でのインベントリ情報収集 Application Discovery Service(ADS)の検証記事(Qiita)</description>
    </item>
    
    <item>
      <title>AWS移行 - Multi-AZのHA構成のためのDRBD性能検証</title>
      <link>https://t-tkm.github.io/blog/posts/2021/07/aws_drbd/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/07/aws_drbd/</guid>
      <description>AWS移行 - Multi-AZのHA構成のためのDRBD性能検証 Multi-AZのHA構成のためのDRBD性能検証(Qiita)</description>
    </item>
    
    <item>
      <title>Alexaでかけ算ゲーム</title>
      <link>https://t-tkm.github.io/blog/posts/2021/03/aws_alexa_practice/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/03/aws_alexa_practice/</guid>
      <description>Alexaでかけ算ゲーム はじめに 今年の正月は、コロナ禍ということで帰省ができなかったため、以前より気になっていたAlexaに手を出してみました。あわよくば、今回の勉強を通して「Alexa認定」も取得できるかも？と思ったのですが、そこまで甘い世界ではありませんでした1。。。 Alexa全体像の理解 さて、実際始めようとすると、今まで公私共に全く触った事の無いサービスという事もあり、どこから手をつけてよいものかわかりません。。。そこでとっかかりとして、Alexa公式 動画シリーズ「Alexa道場」から始めることにしました。こちらの教材がとても丁寧で、ストーリを追って段階的に学習できお勧めです！一通り動画を視聴し終わると、なんとなく(開発含めた</description>
    </item>
    
    <item>
      <title>我が家のマイクラサーバー(AWS編)</title>
      <link>https://t-tkm.github.io/blog/posts/2021/03/minecraft_server_aws_ecs/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2021/03/minecraft_server_aws_ecs/</guid>
      <description>はじめに マイクラサーバ(javaアプリ)をECS+Fargate+EFSで動かしてみた備忘録になります。趣味であるこのシステムの運用を通じて、今後周辺ノウハウを強化していきたいというのが(私、インフラエンジニア)目的ですw 我が家はマイクラのヘビーユーザで、息子3人(小学生)と母親が、同じ世界(マイクラではワールドと呼ぶ)にログインして、各々の建築を見せあったり、道具を揃えて洞窟を冒険したり楽しんでいます。私はそのマルチサーバをお守りしており、以前はVM上にサーバを構築して運用していました。しかし、1つのサーバで展開できるワールドは1つであり、色々複数のワールドを家族に提供するには、複数サーバを立てる必要があります。そこで、最近ではア</description>
    </item>
    
    <item>
      <title>FireLensを使ってFargateコンテナのファイルログを転送してみた</title>
      <link>https://t-tkm.github.io/blog/posts/2020/07/aws_firelens_practice/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0900</pubDate>
      
      <guid>https://t-tkm.github.io/blog/posts/2020/07/aws_firelens_practice/</guid>
      <description>はじめに 通常はTwelve-Factor Appに「ログをイベントストリームとして扱う」とあるように、コンテナアプリケーションのログは標準出力を集約先とするのが設計原則です。しかし、もともと仮想マシンで動かしていたサーバをコンテナ化しようとする時など、 「まずはアプリケーションコンテナを極力改修せず(ログ出力先を、ファイルから標準出力に変更)になんとかならないか。。。」 というニーズもあるかと思います。ここでは、ファイル出力されたアプリケーションコンテナのログをFireLens(Fluentbit)を使ってCloudWatchへ転送する方法を紹介します。尚、FireLensを使わずとも、サイドカー(Fluentd)を自前で準備する方法とし</description>
    </item>
    
  </channel>
</rss>
