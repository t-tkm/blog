<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2025 on Takumi Tomita's Blog</title><link>https://t-tkm.github.io/blog/archives/2025/</link><description>Recent content in 2025 on Takumi Tomita's Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>&amp;copy; 2022 Takumi Tomita Powered by Hugo &amp; Pickles.</copyright><lastBuildDate>Fri, 03 Oct 2025 17:00:00 +0900</lastBuildDate><atom:link href="https://t-tkm.github.io/blog/archives/2025/index.xml" rel="self" type="application/rss+xml"/><item><title>Minecraftサーバー管理で学ぶ！AWS ECS + MCP連携によるコンテナ運用（後編）</title><link>https://t-tkm.github.io/blog/posts/2025/10/aws_minecraft_mcp_2/</link><pubDate>Fri, 03 Oct 2025 17:00:00 +0900</pubDate><guid>https://t-tkm.github.io/blog/posts/2025/10/aws_minecraft_mcp_2/</guid><description>1. 概要 本記事では、前編で構築したAWS ECS上のMinecraftサーバーとClaude DesktopをMCP（Model Context Protocol、以降MCP） 経由で連携させ、自然言語でサーバー管理を行える革新的な環境を構築します。 前編では、AWS CDKを使用したインフラストラクチャの構築からポートフォワードの設定までを詳しく説明し、 MinecraftクライアントやRCONクライアント（rcon-cli、ECS Exec経由）を使った接続確認も実施しました。 本記事（後編）では、MCPサーバーの構築とClaude Desktopとの連携方法を解説し、 「時間を夜にして」「全員にダイヤモンドを配って」「空中に花火を打ち上げて」 といった自然な言葉でM</description></item><item><title>Minecraftサーバー管理で学ぶ！AWS ECS + MCP連携によるコンテナ運用（前編）</title><link>https://t-tkm.github.io/blog/posts/2025/09/aws_minecraft_mcp_1/</link><pubDate>Sun, 28 Sep 2025 00:00:00 +0900</pubDate><guid>https://t-tkm.github.io/blog/posts/2025/09/aws_minecraft_mcp_1/</guid><description>1. 概要 本記事では、AWS ECS上でMinecraftサーバーを構築し、MCP（Model Context Protocol）を通じて Claude Desktopから管理できる環境を構築します。前編では、AWS CDKを使用したインフラストラクチャの 構築からポートフォワードの設定までを詳しく説明します。 1-1. この記事で学べること この記事では、Minecraftという身近なゲームを通して、ECSコンテナサーバの運用を学ぼうという思いもあり記載しました。 技術（個人的な備忘録も兼ねて） コンテナオーケストレーション：ECS + Fargateでの運用 インターネット経由のコンテナ操作：ECS Exec機能の活用 監視・観測性：CloudWatch Logs/メトリクスでのデバッグ セキュリ</description></item><item><title>Vibe CodingでDify環境構築</title><link>https://t-tkm.github.io/blog/posts/2025/06/aws_vibe_coding/</link><pubDate>Mon, 30 Jun 2025 15:00:00 +0900</pubDate><guid>https://t-tkm.github.io/blog/posts/2025/06/aws_vibe_coding/</guid><description>1. 概要 最近、Difyが注目を集めており、クラウドで簡単に試せる環境構築の相談を受ける機会が増えています。つい先日、Azure版でDify環境構築の案件があったのですが、せっかくの機会なのでAWSでも同様の環境を準備してみようと考えました。 しかし、私自身は日常業務において、IaCコードを積極的に記述する機会が限られており、ゼロベースで本格的なインフラ構築を行うとなると、相応の学習時間と開発期間を要すると想定していました。 そこで、昨今話題となっているVibe Codingアプローチを実際に検証してみることにしました。結果的に、当初の想定を大きく上回る効果を得ることができ、短期間でDify環境の構築を完了することができました。 本記事では、そ</description></item><item><title>AP-DB分離パターンにおけるレイテンシー影響確認</title><link>https://t-tkm.github.io/blog/posts/2025/03/aws_sesar2_vpn/</link><pubDate>Sun, 30 Mar 2025 17:00:00 +0900</pubDate><guid>https://t-tkm.github.io/blog/posts/2025/03/aws_sesar2_vpn/</guid><description>1. 概要 オンプレミスで稼働しているレガシーアプリケーション（※）をクラウドに移行する方法として、 「Replatform to Containers」というアプローチがあります。このアプローチでは、アプリケーションを コンテナ化することで、クラウドネイティブな環境へと移行しつつも、アプリケーションコード自体の 大規模な書き換えを避けることができます。特に長年運用されてきたシステムでは、コードの全面的な 刷新よりも、段階的な移行が現実的な選択肢となることが多いです。 ※本記事では、かつて主流だったSeasar2ベースのアプリケーションをレガシーアプリケーションの例として取り上げています。 この手法では、アプリケーションコードの修正を最小限にとどめてコンテ</description></item></channel></rss>